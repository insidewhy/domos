module fs    = 'fs'
module cp    = 'child_process'
module growl = 'growl'

var SOURCE_FILE      = /\.six$/,
    JADE_FILE        = /\.jade$/,
    SCSS_FILE        = /\.scss$/,
    FILE_CHANGE_INCL = /^[^.]/
    fileChange       = (event, file) => event == 'change' &&
                                        FILE_CHANGE_INCL.exec(file)

var STUTTER_INTERVAL   = 100,
    protectFromStutter = callback => {
  var nFired = 0

  return arg => {
    ++nFired
    var _wantedNFired = nFired
    setTimeout(() => {
      if (_wantedNFired === nFired)
        callback(arg)
    }, STUTTER_INTERVAL)
  }
}

var errorLog = data => { process.stderr.write(data.toString()) }

var errorAlert = msg => {
  growl(msg, { name: 'talking.js', title: 'Failed' })
}

var recompile = protectFromStutter(arg => {
  console.log('make', arg)
  var make = cp.spawn('make', [arg])
  make.stderr.on('data', errorLog)

  make.on('exit', code => {
    if (code)
      errorAlert('make', arg, 'failed')
    else
      console.log('make', arg, 'succeeded')
  })
})

fs.watch('lib', (event, file) =>  {
  if (fileChange(event, file) && SOURCE_FILE.exec(file))
    recompile('package')
})

fs.watch('test', (event, file) =>  {
  if (! fileChange(event, file))
    return

  if (JADE_FILE.exec(file))
    recompile('test-html')
  else if (SCSS_FILE.exec(file))
    recompile('test-style')
})
