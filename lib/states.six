import {transition, css} from './transitions'
import $each from './util'

export class States {
  constructor(opts) {
    _.extend(this, Backbone.Events)

    if (! opts)
      opts = {}

    // map of state type to related parent selector
    this._selectorMap     = opts.selectorMap || {}
    // default selector for states with no selector in map
    this._defaultSelector = opts.default || $('body')

    // Prefix used in data tags before state name
    this.statePrefix = opts.statePrefix || 's-'

    // table of current state values by type
    this.state = {}
  }

  /// Change elements below a parent selector according to data tags denoting
  /// how the tag should look depending on certain states.
  /// @param type       State type.
  /// @param val        Value of state.
  /// @param callback   Optional callback to run after all operations have
  ///                   complete. Takes argument "cancelled" to determine
  ///                   if all state changes were successful.
  /// @param sel        Override parent by which to limit elements to change.
  set(type, val, callback, sel) {
    var changedTypes = []

    if (val === null || val === 'null') {
      if (! this.state[type]) {
        this.trigger('redo-' + type + '-null')
        return
      }

      // the field-change event will contain the string null
      val = 'null'
      changedTypes.push(type)
      delete this.state[type]
    }
    else {
      if (this.state[type] === val) {
        this.trigger('redo-' + type + '-' + val, val)
        return
      }

      this.state[type] = val
      changedTypes.push(type)
    }

    // TODO: run opacity 0 transitions first if there are any
    var transitions = this._getTransitions(type, val)

    var fadeOutTrans = $()
    for (var i = 0; i < transitions.length; ) {
      var action = transitions[i].action
      if (action.cssType === 'opacity' && action.cssVal == 0) {
        fadeOutTrans = fadeOutTrans.add(transitions[i].node)
        transitions.splice(i, 1)
      }
      else
        ++i
    }

    var afterFadeOut = cancelled => {
      if (cancelled) {
        if (callback)
          callback(cancelled)
        return
      }

      var nTrans = transitions.length, isCancelled = false
      var runAfter = cancelled => {
        if (cancelled) {
          if (isCancelled)
            return
          isCancelled = true

          if (callback)
            callback()
        }
        else if (callback && ! --nTrans)
          callback()

        this.trigger('state-change', this.state, changedTypes)
        this.trigger(type + '-' + val, val)
      }

      transitions.forEach(trans => {
        transition(trans.node,
                   trans.action.cssType,
                   trans.action.cssVal,
                   runAfter)
      })
    }

    if (fadeOutTrans.length)
      transition(fadeOutTrans, 'opacity', 0, afterFadeOut)
    else
      afterFadeOut()
  }

  _selectorFor(type) {
    return this._selectorMap[type] || this._defaultSelector
  }

  /// Get transitions relating to a state.
  /// @param sel Optional override parent by which to limit elements to
  //         change (otherwise selectorMap/default is used).
  _getTransitions(type, val, sel) {
    var transitions = []

    if (! sel)
      sel = this._selectorFor(type)

    var dataTag = 'data-' + this.statePrefix + type

    $each(sel.find('[' + dataTag + ']'), node => {
      var cssType, cssVal, activated = false

      var nod = node[0], currentState = nod.__domosState
      if (currentState && currentState[type] === val)
        return

      activated = node.attr(dataTag).split('|').some(state => {
        var colonIdx = state.indexOf(':')
        cssType = 'opacity', cssVal = 1
        if (colonIdx !== -1) {
          var action = state.substr(colonIdx + 1),
              eqIdx = action.indexOf('=')
          if (eqIdx === -1)
            throw new Error('invalid transition type ' + action)

          action = action.split(eqIdx)
          cssType = action[0]
          cssVal  = action[1]
          state = state.substr(colonIdx)
        }

        if (state[0] === '!' ? val !== state.substr(1) : val === state) {
          transitions.push({ node, action: { cssType, cssVal } })
          return true
        }
        else
          return false
      })

      if (nod.__domosUndo) {
        if (! activated) {
          transitions.push({ node, action: nod.__domosUndo })
        }
        else if (cssType !== nod.__domosUndo.cssType) {
          transitions.push({ node, action: nod.__domosUndo })
        }
        else if (cssVal == css(node, cssType)) {
          return
        }

        delete nod.__domosUndo
      }

      if (activated) {
        if (! nod.__domosState)
          nod.__domosState = {}

        var prevCssVal = css(node, cssType)
        nod.__domosState[type] = val
        nod.__domosUndo = { cssType, cssVal: prevCssVal }
      }
      else {
        if (nod.__domosState && nod.__domosState[type])
          delete nod.__domosState[type]
      }
    })

    return transitions
  }

  /// Restore state from object to UI avoiding all transition effects.
  /// @param state Accepts object like state attribute of type against value.
  restore(state) {
    this.state = state

    _.each(state, (val, type) => {
        if (val === null || val === 'null') {
          val = 'null'
          delete this.state[type]
        }

        var transitions = this._getTransitions(type, val)

        transitions.forEach(trans => {
          var cssType = trans.action.cssType,
              cssVal  = trans.action.cssVal,
              node    = trans.node

          var prevCssVal = css(node, cssType)
          node.show()
          css(node, cssType, cssVal)
          node[0].__domosUndo = { cssType, cssVal: prevCssVal }
        })

        this.trigger(type + '-' + val, val)
    })
  }
}
