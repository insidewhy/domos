/// Represents a point in the DOM at which a particular template may
/// instantiate entities.
class TemplateCollectionInstantiation {
  constructor(template, opts) {
    this._template = template

    this.children = [] // inserted elements

    opts = opts || {}
    if (opts.parent)
      this._parent = opts.parent
    else
      this._after = opts.after || template.template$
  }

  /// Clear UI content, optionally replacing with new data.
  reset(collection) {
    for (var i = 0; i < this.children.length; ++i)
      this.children[i].remove()

    this.children.length = 0

    if (collection)
      collection.forEach(model => { this.append(model).show() })
  }

  /// Instantiate template at a particular point in the already inserted
  /// collection of elements and return a jquery selector to the inserted
  /// element.
  insert(model, idx) {
    if (this.children.length <= idx)
      return this.append(model)

    var model$ = this._template.makeElement(model)
    this.children[idx].before(model$)
    this.children.splice(idx, 0, model$)

    return model$
  }

  /// Return index of a particular element.
  /// @param node Node to find index of (if it's already a number just
  ///             return it)
  indexOf(node) {
    if (typeof node === 'number')
      return node

    return this.children.indexOf(node)
  }

  swap(a, b) {
    var idxa = this.indexOf(a),
        idxb = this.indexOf(b)

    if (idxa === idxb)
      return

    if (idxa > idxb) {
      var tmp = idxa
      idxa = idxb
      idxb = tmp
    }

    // remove nodes and re-insert
    var b = this.children.splice(idxb, 1)[0]
        a = this.children.splice(idxa, 1)[0]

    this.insert(b, idxa)
    this.insert(a, idxb)
  }

  append(model) {
    var model$ = this._template.makeElement(model)

    if (this.children.length === 0) {
      if (this._after)
        this._after.after(model$)
      else if (this._parent)
        this._parent.append(model$)
    }
    else
      this.children[this.children.length - 1].after(model$)

    this.children.push(model$)

    return model$
  }
}

// various transforms
var transforms = {
  text: value => function(node, model) {
    node.html(value.call(this, model))
  },
  if: value => function(node, model) {
    if (! value.call(this, model))
      node.hide()
  },
  foreach: (value, tmpltNode) => {
    tmpltNode.removeAttr('data-t-foreach')

    // TODO: detach tmpltNode childre
    var template = new Template(tmpltNode)

    var callback = function(node, model) {
      // this should correspond to an array of data
      var data = value.call(this, model)
      if (! (data instanceof Array))
        throw new Error("bad foreach in domos template")

      var eachData = data.map(val => {
        if (typeof val === 'string')
          val = { model: val }
        else
          val = _.clone(val)

        val.__lastIteration = false
        return val
      })

      if (eachData.length) {
        eachData[eachData.length - 1].__lastIteration = true
        template.instantiateCollection({ after: node }).reset(eachData)
      }
    }

    // TODO: attach template to callback
    return callback
  },
  'xlink:href': value => function(node, model) {
    node[0].setAttributeNS(
      'http://www.w3.org/1999/xlink', 'href', value.call(this, model))
  }
}
// default transform
var setAttr = (attrName, value) =>
  function(node, model) { node.attr(attrName, value.call(this, model)) }

// resolve node and array of positions into descendant node
var getNode = (node, pos) => {
  node = $(node[pos[0]])
  for (var i = 1; i < pos.length; ++i) {
    node = $(node.contents()[pos[i]])
  }
  return node
}

var valComponent = /[^\$]+|\$[a-zA-Z_][a-zA-Z0-9_]+|\${[^}]+}/g

/// Parse value returning a function that accepts a model and returns
/// a string or boolean (based on the contents of the value template)
var getValueFactory = value => {
  var callbacks = [ ]
  var _match
  while ((_match = valComponent.exec(value))) {
    (function () { // run in scope for various variables
      var match = _match[0]
      if (match[0] === '$') {
        if (match[1] === '{') {
          // with does not conform to strict mode... hmmm
          var evalSt = 'with (model) { ' + match.slice(2, -1) + ' }'
          callbacks.push(function (model) { return eval(evalSt) })
        }
        else {
          // variable
          var key = match.substring(1)
          callbacks.push(model => model[key])
        }
      }
      else {
        callbacks.push(model => match)
      }
    })()
  }

  if (callbacks.length === 1)
    return callbacks[0]
  else
    return model => {
      var ret = ''
      callbacks.forEach(callback => {
        ret += callback(model)
      })
      return ret
    }
}

class Template {
  /// Construct with name and element containing template data.
  /// @param node       Node that contains template
  /// @detail The containing template is hidden and left in place as a marker
  ///         from which created elements should be placed.
  constructor(node) {
    this.template$ = node

    // array of substitutions to perform
    this._subs = this._parseTemplate(node)
    // console.log(this._subs)

    node.hide() // should also be hidden by css to avoid glitching
  }

  // parse template and return an array of substitutions in the form:
  // {
  //   pos: array of indexes relating to node position.
  //   transform: transform to perform on node
  // }
  _parseTemplate(node) {
    var subs = [],
        pos = [] //< current position whilst searching for substitutions

    var recurse = node => {
      var ignoreChildren = false

      // TODO: ignore comments and treat text nodes differently
      var isStateful = false, attrs = node[0].attributes
      if (! attrs)
        return

      for (var i = 0; i < attrs.length; ++i) {
        if (attrs[i].name === 'data-t-foreach') {
          ignoreChildren = true

          var value     = attrs[i].value,
              getValue  = getValueFactory(value),
              transform = transforms.foreach(getValue, node)

          subs.push({ pos: _.clone(pos), transform })
          break
        }
      }

      if (! ignoreChildren) {
        var rmAttrs = [] // attributes to remove

        for (var i = 0; i < attrs.length; ++i) {
          var name = attrs[i].name, value = attrs[i].value

          if (! isStateful) {
            if (isStateful = /^data-s-/.test(name))
              continue
          }

          var match = /^data-t-([a-z:]+)/.exec(name)
          if (! match)
            continue
          var attr = match[1]

          // remove data tag from template... jquery removeData doesn't
          // seem to work
          rmAttrs.push(name)
          if (attr === 'template')
            continue

          var getValue = getValueFactory(value)

          var transform = transforms[attr]
          transform = transform ? transform(getValue, node) :
                                  setAttr(attr, getValue)
          subs.push({ pos: _.clone(pos), transform })
        }

        rmAttrs.forEach(name => { node.removeAttr(name) })
      }

      if (isStateful) {
        // for stateful nodes then copy __domosUndo from parent otherwise
        // transitions on that node cannot be undone.
        subs.push({
          pos: _.clone(pos),
          transform(newNode) {
            var undo = node[0].__domosUndo
            if (undo) {
              newNode[0].__domosUndo = _.clone(undo)
              if (undo.cssType === 'opacity' && undo.cssVal === '0') {
                // in case cloning from stateful node hidden by other means
                // TODO: what if opacity should be something other than 1
                newNode.css('opacity', 1)
                newNode.show()
              }
            }
          }
        })
      }

      if (! ignoreChildren) {
        var idx = 0
        pos.push(idx)

        _.each(node.contents(), child => {
          child = $(child)
          pos[pos.length - 1] = idx++
          recurse(child)
        })

        pos.pop()
      }
    }

    for (var i = 0; i < node.length; ++i) {
      pos[0] = i
      recurse(node)
    }
    return subs
  }

  updateElement(model, node) {
    model = model.attributes || model

    // first derive pointers from this._subs before running transforms (which
    // may change tree and affect pointer lookup)
    var transforms = this._subs.map(sub => {
      var {pos, transform} = sub
      var child = getNode(node, pos)
      return { child, transform }
    })

    // run transforms against safe references
    transforms.forEach(sub => {
      var {child, transform} = sub
      transform.call(child, child, model)
    })
  }

  /// Take a model and turn it into a node unless it already is one.
  makeElement(model) {
    if (model instanceof $)
      return model

    var node = this.template$.clone()
    this.updateElement(model, node)
    return node
  }

  /// Return version of template suitable for isntantiation many versions
  /// of the model in a collection into the DOM at a certain point.
  /// @param opts May contain 'after' and 'parent' which signify where
  ///             to put created elements, by default they will be created
  ///             after the point in the DOM at which the template lives.
  instantiateCollection(opts) {
    return new TemplateCollectionInstantiation(this, opts)
  }
}

export class Templates {
  constructor(opts) {
    opts = opts || {}

    this._templates = {}
    this._container = opts.container || $('body')
  }

  // get template with given name
  get(name) {
    // first check cache
    var existing = this._templates[name]
    if (existing)
      return existing

    var node = this._container.find('[data-t-template=' + name + ']')
    if (node.length === 0)
      throw new Error('could not find template')
    else if (node.length !== 1)
      throw new Error('multiple matches for template')

    return this._templates[name] = new Template(node)
  }
}
