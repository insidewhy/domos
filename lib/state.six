import transition from './transitions'
import {$each, css} from './util'

var isNullState = val => val === null || val === 'null'

// index used to relate fade outs and ins, otherwise in certain cases state
// changes can compete
var lastFadeOutIdx = 0

export class State {
  constructor(opts) {
    _.extend(this, Backbone.Events)

    if (! opts)
      opts = {}

    // map of state type to related parent selector
    this._selectorMap     = opts.selectorMap || {}
    // default selector for states with no selector in map
    this._defaultSelector = opts.default || $('body')

    // Prefix used in data tags before state name
    this.statePrefix = opts.statePrefix || 's-'

    // table of current state values by type
    this.state = {}
  }

  /// Test if a value would cause a type change and if so return
  /// the previous value.
  /// @param type The type to check.
  /// @param val  If the value equals this then return null instead of
  ///             the previous else return it as a string.
  _isChange(type, val) {
    var prevVal = this.state[type] || null

    if (prevVal === null)
      return isNullState(val) ? null : 'null'
    else
      return prevVal === val ? null : '' + prevVal
  }

  /// Change elements below a parent selector according to data tags denoting
  /// how the tag should look depending on certain states.
  /// @param type       State type.
  /// @param val        Value of state.
  /// @param callback   Optional callback to run after all operations have
  ///                   complete. Takes argument "cancelled" to determine
  ///                   if all state changes were successful.
  /// @param opts       Options override.
  set(type, val, callback, opts) {
    if (typeof type === 'object') {
      opts = callback || {}
      callback = val
      val = type

      // call set for each property but aggregate events
      opts = Object.create(opts)
      var noStateChangeEvent = opts.noStateChangeEvent
      opts.noStateChangeEvent = true // override for recursive set calls

      var changes = {}
      var changeTypes = Object.keys(val).filter(type => {
        var typeVal = val[type]
        var prevVal = this._isChange(type, typeVal)
        if (prevVal === null) {
          this._trigger('redo', type, '' + typeVal)
          return false
        }

        changes[type] = prevVal
        return true
      })

      var nChangesLeft = changes.length = changeTypes.length
      if (nChangesLeft === 0)
        return

      var onSingleStateChange = cancelled => {
        if (nChangesLeft === -1)
          return

        if (cancelled) {
          nChangesLeft = -1
          if (callback)
            callback(true)
        }
        else if (--nChangesLeft === 0) {
          if (! noStateChangeEvent)
            this.trigger('state-change', this.state, changes)

          if (callback)
            callback()
        }
      }

      changeTypes.forEach(type => {
        this.set(type, val[type], onSingleStateChange, opts)
      })

      if (! opts.noStateChangeEvent)
        this.trigger('before:state-change', this.state, changes)
      return
    }

    if (! opts)
      opts = {}

    var prevVal = this._isChange(type, val)
    if (prevVal === null) {
      this._trigger('redo', type, '' + val) // '' + to turn null into string
      return
    }

    if (isNullState(val)) {
      val = 'null'
      delete this.state[type]
    }
    else {
      this.state[type] = val
    }

    var transitions = this._getTransitions(type, val, opts)

    this._trigger('before', type, val)
    if (! opts.noStateChangeEvent) {
      var changes = { length: 1 }
      changes[type] = prevVal
      this.trigger('before:state-change', this.state, changes)
    }

    // find "fade out" transitons
    var fadeOutTrans = $()
    for (var i = 0; i < transitions.length; ) {
      var action = transitions[i].action
      if (action.cssType === 'opacity' && action.cssVal == 0) {
        fadeOutTrans = fadeOutTrans.add(transitions[i].node)
        transitions.splice(i, 1)
      }
      else
        ++i
    }

    var fadeOutIdx = ++lastFadeOutIdx

    var afterFadeOut = cancelled => {
      if (cancelled) {
        if (callback)
          callback(cancelled)
        return
      }

      var nTrans = transitions.length
      // to run when all transitions have completed
      var completedTransitions = () => {
        if (callback)
          callback()
        this._trigger(type, val)
        if (! opts.noStateChangeEvent)
          this.trigger('state-change', this.state, changes)
      }

      var runAfter = cancelled => {
        if (nTrans === -1)
          return

        if (cancelled) {
          nTrans = -1
          if (callback)
            callback(cancelled)
        }
        else if (--nTrans === 0) {
          completedTransitions()
        }
      }

      if (nTrans === 0) {
        completedTransitions()
      }
      else {
        // if the fadeOutIdx on anything changed it means it was cancelled
        // by a subsequent fade in on a competing state
        transitions.forEach(trans => {
          if (trans.node[0].fadeOutIdx !== fadeOutIdx) {
            fadeOutTrans.show()
            runAfter(true)
          }
          else {
            transition(trans.node,
                       trans.action.cssType,
                       trans.action.cssVal,
                       runAfter)
          }
        })
      }
    }

    for (var i = 0; i < fadeOutTrans.length; ++i)
      fadeOutTrans[0].fadeOutIdx = fadeOutIdx
    for (var i = 0; i < transitions.length; ++i)
      transitions[i].node[0].fadeOutIdx = fadeOutIdx

    if (fadeOutTrans.length)
      transition(fadeOutTrans, 'opacity', 0, afterFadeOut)
    else
      afterFadeOut()
  }

  /// Set entire state
  /// @detail This method uses set
  /// @param state New state to apply.
  setAll(state, callback, opts) {
    var newState = {}
    Object.keys(state).forEach(key => {
      var val = state[key]
      if (this.state[key] !== val)
        newState[key] = val
    })

    Object.keys(this.state).forEach(key => {
      if (! (key in state))
        newState[key] = null
    })

    this.set(newState, callback, opts)
  }

  _selectorFor(type) {
    return this._selectorMap[type] || this._defaultSelector
  }

  /// Get transitions relating to a state.
  /// @param sel Optional override parent by which to limit elements to
  //         change (otherwise selectorMap/default is used).
  _getTransitions(type, val, opts) {
    var transitions = []

    var sel = opts && opts.sel
    if (! sel)
      sel = this._selectorFor(type)

    var dataTag = 'data-' + this.statePrefix + type

    $each(sel.find('[' + dataTag + ']'), node => {
      var cssType, cssVal, activated = false

      var nod = node[0], currentState = nod.__domosState
      if (currentState && currentState[type] === val)
        return

      activated = node.attr(dataTag).split('|').some(state => {
        var colonIdx = state.indexOf(':')
        cssType = 'opacity', cssVal = 1
        if (colonIdx !== -1) {
          var action = state.substr(colonIdx + 1),
              eqIdx = action.indexOf('=')
          if (eqIdx === -1)
            throw new Error('invalid transition type ' + action)

          cssType = action.substr(0, eqIdx)
          cssVal  = action.substr(eqIdx + 1)
          state = state.substr(0, colonIdx)
        }

        if (state[0] === '!' ? val !== state.substr(1) : val === state) {
          transitions.push({ node, action: { cssType, cssVal } })
          return true
        }
        else
          return false
      })

      if (nod.__domosUndo) {
        if (! activated) {
          transitions.push({ node, action: nod.__domosUndo })
        }
        else if (cssType !== nod.__domosUndo.cssType) {
          transitions.push({ node, action: nod.__domosUndo })
        }
        else if (cssVal == css(node, cssType)) {
          return
        }

        // mega TODO: this has been commented out temporarily to work
        //            around bug when fast switching.. domosUndo getting lost
        // delete nod.__domosUndo
      }

      if (activated) {
        if (! nod.__domosState)
          nod.__domosState = {}

        var prevCssVal = css(node, cssType)
        nod.__domosState[type] = val
        nod.__domosUndo = { cssType, cssVal: prevCssVal }
      }
      else {
        if (nod.__domosState && nod.__domosState[type])
          delete nod.__domosState[type]
      }
    })

    return transitions
  }

  _trigger(prefix, type, val) {
    if (! val) {
      val = type
      type = prefix
      prefix = ''
    }
    else {
      prefix = prefix + ':'
    }

    this.trigger(prefix + type + '=' + val, val)
    this.trigger(prefix + type, val)
  }

  /// Restore state from object to UI avoiding all transition effects.
  /// @param state Accepts object like state attribute of type against value.
  restore(state, opts) {
    this.state = state

    _.each(state, (val, type) => {
        if (val === null || val === 'null') {
          val = 'null'
          delete this.state[type]
        }

        var transitions = this._getTransitions(type, val, opts)

        this._trigger('before', type, val)

        transitions.forEach(trans => {
          var cssType = trans.action.cssType,
              cssVal  = trans.action.cssVal,
              node    = trans.node

          var prevCssVal = css(node, cssType)
          node.show()
          css(node, cssType, cssVal)
          node[0].__domosUndo = { cssType, cssVal: prevCssVal }
        })

        this._trigger(type, val)
    })
  }
}
