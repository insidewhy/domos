import {$each, compCss, css} from './util'

var SWITCH_ATTRS = ['opacity', 'width', 'height']

// in chromium dimensions/opacity after transitions are not always exact
// so allow this much deviation when testing for completion
var VERY_SMALL = 0.00001

// Currently only affects firefox: https://bugzil.la/849399
// Some browsers report new opacity incorrectly immediately after a switch
// causes a transition. A delay is used after resetting styles as a
// work-around.
var STATE_INCORRECT_AFTER_SET =
  /Firefox\/(?:1[7-9]|2[0-3])?/.test(navigator.userAgent),
    STATE_INCORRECT_AFTER_SET_LAG = 20 // 10 is a bit too small

var TRANSITIONS_AUTO_AS_0px =
  /Chrome\/2[0-6]?/.test(navigator.userAgent)

/// Transition selector containing one or many HTML elements.
export function transition(nodes, name, value, callback) {
  var changes
  if (typeof name === 'string') {
    changes = {}
    changes[name] = value
  }
  else {
    changes = name
    callback = value
  }

  var attributes = Object.keys(changes),
      nChanges   = attributes.length

  attributes.some(type => {
    if (SWITCH_ATTRS.indexOf(type) !== -1 &&
        parseFloat(changes[type]) > VERY_SMALL)
    {
      nodes.show()
    }
  })

  fixAutos(nodes, attributes, () => {
    var nTrans = nodes.length
    if (! callback || nTrans === 1) {
      transitionElement(nodes, attributes, changes, callback)
    }
    else {
      var nTransitions = nodes.length

      var onSingleTransition = cancelled => {
        if (nTransitions === -1)
          return

        if (cancelled) {
          nTransitions = -1
          callback(true)
        }
        else if (! --nTrans)
          callback()
      }

      $each(nodes, node => {
        transitionElement(node, attributes, changes, onSingleTransition)
      })
    }
  })
}

/// Set css properties from auto to their current values.
/// @detail The callback is called immediately in most browsers but a bug
///         in chrome means will delay the callback to later as the
///         js must yield control to avoid a transition to 0.
/// @param nodes Nodes to transition
/// @param attributes Single string or Array of strings naming CSS
//                    properties to fix.
/// @param callback Callback for after nodes have been fixed.
export function fixAutos(nodes, attributes, callback) {
  if (typeof attributes === 'string')
    attributes = [ attributes ]

  if (TRANSITIONS_AUTO_AS_0px) {
    var autosToFix = []

    $each(nodes, node => {
      attributes.forEach(type => {
        var val = node[0].style[type]
        if (val === '' || val === 'auto')
          autosToFix.push({ type, node })
      })
    })

    if (autosToFix.length) {
      withoutTransitions(nodes, () => {
        autosToFix.forEach(fix => {
          css(fix.node, fix.type, compCss(fix.node, fix.type))
        })
      }, callback)
    }
    else if (callback) {
      callback()
    }
  }
  else {
    $each(nodes, node => {
      attributes.forEach(type => {
        var val = node[0].style[type]
        if (val === '' || val === 'auto')
          css(node, type, compCss(node, type))
      })
    })

    if (callback)
      callback()
  }
}

function removeTransitionState(nod, type, removeEmpty) {
  if (nod.__domosTransition[type]) {
    delete nod.__domosTransition[type]
    if (--nod.__domosTransition.nKeys === 0 && removeEmpty)
      delete nod.__domosTransition
  }
}

/// Perform a set of actions on some nodes without their css transitions
/// turned on.
/// @detail Due to a bug where webkit regards auto as 0px during transitions
///         without and after may not be called until after a setTimeout
///         on these browsers.
/// @param nodes   Nodes to disable transitions for.
/// @param without Function to perform while transitions are disabled.
/// @param after   Function to perform after node transitions are re-enabled.
export function withoutTransitions(nodes, without, after) {
  if (TRANSITIONS_AUTO_AS_0px) {
    $each(nodes, node => {
      node[0].__domosBackupTrans = compCss(node, 'transition')
      css(node, 'transition', 'none')
    })

    if (without)
      without()
    setTimeout(() => {
      $each(nodes, node => {
        css(node, 'transition', node[0].__domosBackupTrans)
        delete node[0].__domosBackupTrans
      })
      if (after)
        after()
    })
  }
  else {
    if (without)
      without()
    if (after)
      after()
  }
}


/// Transition selector containing single HTML element.
function transitionElement(node, attributes, _changes, callback) {
  var changes = Object.create(_changes)
  var autoTypes = []

  // firefox needs a delay after this step else the transition will not fire
  var makeCssChanges = () => {
    node.css(changes)

    var pendingChanges = () =>
      attributes.some(type =>
        Math.abs(parseFloat(compCss(node, type))
                 - parseFloat(changes[type])) > VERY_SMALL)

    var finishedTransition = false

    // this helper is necessary due to https://bugzil.la/849399
    if (pendingChanges()) {
      // a transition occurred
      var nod = node[0]

      // "end of transition" html5 event handler
      var handleTransition = e => {
        if (finishedTransition)
          return

        if (! e) {
          // when the event is not present this means the function
          // was cancelled by the user
          if (callback)
            callback(true)

          finishedTransition = true
          return
        }

        if (SWITCH_ATTRS.indexOf(e.propertyName) !== -1 &&
            parseFloat(compCss(node, e.propertyName)) < VERY_SMALL)
        {
          node.css('display', 'none')
        }

        if (! pendingChanges()) {
          // transition completed
          attributes.forEach(type => {
            removeTransitionState(nod, type, true)
          })
          nod.removeEventListener('transitionend', handleTransition)
          nod.removeEventListener('webkitTransitionEnd', handleTransition)

          finishedTransition = true
          withoutTransitions(
            node,
            () => {
              autoTypes.forEach(type => { css(node, type, 'auto') })
            }, callback)
        }
      } // end of transition end callback

      if (nod.__domosTransition) {
        attributes.forEach(type => {
          // show it has cancelled
          var listener = nod.__domosTransition[type]
          if (listener) {
            listener(null)
            // calling twice on same listener has no effect
            nod.removeEventListener('transitionend', listener)
            nod.removeEventListener('webkitTransitionEnd', listener)

            removeTransitionState(nod, type)
          }
        })
      }
      else {
        nod.__domosTransition = {}
      }

      attributes.forEach(type => {
        nod.__domosTransition[type] = handleTransition
      })
      nod.__domosTransition.nKeys = attributes.length

      nod.addEventListener('transitionend', handleTransition)
      nod.addEventListener('webkitTransitionEnd', handleTransition)
    }
    else {
      if (attributes.some(type =>
            SWITCH_ATTRS.indexOf(type) !== -1 &&
            parseFloat(changes[type]) < VERY_SMALL))
      {
          node.css('display', 'none')
      }

      if (callback)
        callback()
    }
  }

  var makeCssChangesHelper = () => {
    if (STATE_INCORRECT_AFTER_SET)
      setTimeout(makeCssChanges, STATE_INCORRECT_AFTER_SET_LAG)
    else
      makeCssChanges()
  }

  attributes.forEach(type => {
    if (_changes[type] === 'auto')
      autoTypes.push(type)
  })

  if (autoTypes.length) {
    withoutTransitions(node, () => {
      autoTypes.forEach(type => {
        var bak = compCss(node, type)
        css(node, type, 'auto')
        changes[type] = compCss(node, type)
        css(node, type, bak)
      })
    }, makeCssChangesHelper)
  }
  else {
    makeCssChangesHelper()
  }
}
